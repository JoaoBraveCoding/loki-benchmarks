logger:
  name: logger
  namespace: default
  image: quay.io/periklis/logger:latest
  tenantId: observatorium

querier:
  name: querier
  namespace: default
  image: quay.io/periklis/hey:latest
  tenantId: observatorium

metrics:
  url: http://127.0.0.1:9090
  enableCadvisorMetrics: false
  # Align these with ./prometheus/config.yaml
  jobs:
    distributor: loki-distributor
    ingester: loki-ingester
    querier: loki-querier
    queryFrontend: loki-query-frontend

loki:
  distributor: http://observatorium-xyz-loki-distributor-http.observatorium.svc.cluster.local:3100
  queryFrontend: http://observatorium-xyz-loki-query-frontend-http.observatorium.svc.cluster.local:3100

scenarios:
  highVolumeReads:
    enabled: true
    configurations:
      - description: "Read - simple - 20 queries-per-second"
        samples:
          interval: "120s"
          range: "30s"
          total: 2
        writers:
          replicas: 10
          args:
            logps: 100
        readers:
          replicas: 2
          throughput: 10
          queries:
            sumRateByLevel: 'sum(rate({component!=""}[1h])) by (level)'
          startThreshold: 1024000
      - description: "Read - aggregate - 20*3 queries-per-second"
        samples:
          interval: "120s"
          range: "30s"
          total: 2
        writers:
          replicas: 10
          args:
            logps: 100
        readers:
          replicas: 2
          throughput: 10
          queries:
            topTenComponents: 'topk(10, sum(rate({component!=""}[1h])) by (level))'
            countOverTime: 'count_over_time({component!=""}[1h])'
            bytesOverTime: 'bytes_over_time({component!=""}[1h])'
          startThreshold: 1024000
      - description: "Read - dashboard - 20*8 queries-per-second"
        samples:
          interval: "120s"
          range: "30s"
          total: 2
        writers:
          replicas: 10
          args:
            logps: 100
        readers:
          replicas: 2
          throughput: 10
          queries:
            sumRateByLevel: 'sum(rate({component!=""}[1m])) by (level)'
            devopsend: 'sum(rate({component="devopsend"}[1m])) by (level)'
            fullstackend: 'sum(rate({component="fullstackend"}[1m])) by (level)'
            frontend: 'sum(rate({component="frontend"}[1m])) by (level)'
            backend: 'sum(rate({component="backend"}[1m])) by (level)'
            allpanics: 'sum(rate({msg=~"panic.*"}[1m]))'
            countpanics: 'count_over_time({msg=~"panic.*"}[5m])'
            topTenErrors: 'topk(10, sum(rate({component!="", level="error"}[1h])) by (component))'
          startThreshold: 1024000
  highVolumeWrites:
    enabled: true
    configurations:
      - description: "Write 100 logs-per-second"
        samples:
          interval: "60s"
          range: "30s"
          total: 2
        writers:
          replicas: 1
          args:
            logps: 100
      - description: "Write 1,000 logs-per-second"
        samples:
          interval: "60s"
          range: "30s"
          total: 2
        writers:
          replicas: 10
          args:
            logps: 100
